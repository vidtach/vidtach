/*!
 * lamejs plugin for videojs-record
 * @version 3.9.0
 * @see https://github.com/collab-project/videojs-record
 * @copyright 2014-2020 Collab
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("videojs")):"function"==typeof define&&define.amd?define("lamejs",["videojs"],t):"object"==typeof exports?exports.lamejs=t(require("videojs")):(e.VideojsRecord=e.VideojsRecord||{},e.VideojsRecord.lamejs=t(e.videojs))}(window,(function(e){return function(e){var t={};function o(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(i,r,function(t){return e[t]}.bind(null,r));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=9)}({0:function(t,o){t.exports=e},9:function(e,t,o){"use strict";o.r(t);var i=o(0),r=o.n(i);const s=r.a.getComponent("RecordEngine");class n extends s{constructor(e,t){super(e,t),this.debug=!1,this.sampleRate=44100,this.bitRate=128,this.audioWorkerURL="worker-realtime.js",this.audioType="audio/mp3"}setup(e,t,o){this.inputStream=e,this.mediaType=t,this.debug=o,this.config={debug:this.debug,sampleRate:this.sampleRate,bitRate:this.bitRate},this.engine=new Worker(this.audioWorkerURL),this.engine.onmessage=this.onWorkerMessage.bind(this),this.engine.postMessage({cmd:"init",config:this.config})}start(){let e=window.AudioContext||window.webkitAudioContext;this.audioContext=new e,this.audioSourceNode=this.audioContext.createMediaStreamSource(this.inputStream),this.processor=this.audioContext.createScriptProcessor(0,1,1),this.processor.onaudioprocess=this.onAudioProcess.bind(this),this.audioSourceNode.connect(this.processor),this.processor.connect(this.audioContext.destination)}stop(){this.processor&&this.audioSourceNode&&(this.audioSourceNode.disconnect(),this.processor.disconnect(),this.processor.onaudioprocess=null),this.audioContext&&this.audioContext.close().then(()=>{}).catch(e=>{}),this.engine.postMessage({cmd:"finish"})}onWorkerMessage(e){switch(e.data.cmd){case"end":this.onStopRecording(new Blob(e.data.buf,{type:this.audioType}));break;case"error":this.player().trigger("error",e.data.error);break;default:this.player().trigger("error",e.data)}}onAudioProcess(e){let t=e.inputBuffer.getChannelData(0);this.engine.postMessage({cmd:"encode",buf:t})}}r.a.LamejsEngine=n,t.default=n}})}));