/*!
 * opus-recorder plugin for videojs-record
 * @version 3.9.0
 * @see https://github.com/collab-project/videojs-record
 * @copyright 2014-2020 Collab
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("videojs")):"function"==typeof define&&define.amd?define("opus-recorder",["videojs"],t):"object"==typeof exports?exports["opus-recorder"]=t(require("videojs")):(e.VideojsRecord=e.VideojsRecord||{},e.VideojsRecord["opus-recorder"]=t(e.videojs))}(window,(function(e){return function(e){var t={};function o(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(i,n,function(t){return e[t]}.bind(null,n));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=11)}({0:function(t,o){t.exports=e},11:function(e,t,o){"use strict";o.r(t);var i=o(0),n=o.n(i);const r=n.a.getComponent("RecordEngine");class s extends r{constructor(e,t){super(e,t),this.debug=!1,this.audioChannels=2,this.bufferSize=4096,this.sampleRate=48e3,this.audioWorkerURL="encoderWorker.min.js",this.audioType="audio/ogg",this.pluginLibraryOptions={}}setup(e,t,o){this.inputStream=e,this.mediaType=t,this.debug=o,this.config={leaveStreamOpen:!0,numberOfChannels:this.audioChannels,bufferLength:this.bufferSize,encoderSampleRate:this.sampleRate,encoderPath:this.audioWorkerURL},this.config=Object.assign(this.config,this.pluginLibraryOptions),this.engine=new Recorder(this.config),this.engine.ondataavailable=this.onRecordingAvailable.bind(this);let i=window.AudioContext||window.webkitAudioContext;this.audioContext=new i,this.audioSourceNode=this.audioContext.createMediaStreamSource(this.inputStream)}start(){this.engine.start(this.audioSourceNode).then(()=>{}).catch(e=>{this.player().trigger("error",e)})}stop(){this.engine.stop()}pause(){this.engine.pause()}resume(){this.engine.resume()}onRecordingAvailable(e){let t=new Blob([e],{type:this.audioType});this.onStopRecording(t)}}n.a.OpusRecorderEngine=s,t.default=s}})}));